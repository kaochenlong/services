#!/bin/bash

# Check if docker engine is running
if ! docker info > /dev/null 2>&1; then
  echo "Please install Docker first and make sure docker engine is running."
  exit 1
fi

# environments
export COMPOSE_IGNORE_ORPHANS=True

# utilities
function is_m1() {
  if [[ $(uname -m) == 'arm64' ]]; then
    return 1
  else
    return 0
  fi
}

# create volume folder if not exists
[ -d volumes ] || mkdir -p volumes/{elasticsearch,mongodb,mysql,postgresql,redis}

# check if external network exists?
if [[ "$(docker network ls | grep "external-service-network")" == "" ]] ; then
  docker network create external-service-network > /dev/null 2>&1
  printf "External network: 'external-service-network' created.\n\n"
fi

printf "\nServices:\n1. MongoDB\n2. PostgreSQL\n3. MySQL\n4. Redis\n5. ElasticSearch\n6. Adminer\n7. RabbitMQ\n8. OpenLDAP\n\n請選擇："

read service_name

case $service_name in

   1)
     # MongoDB
     docker-compose -f mongodb.yml up --build
   ;;

   2)
     # PostgreSQL
     docker-compose -f postgresql.yml up --build
   ;;

   3)
     # MySQL
     is_m1
     if [ $? == 1 ]
     then
       docker-compose -f mysql-m1.yml up --build
     else
       docker-compose -f mysql.yml up --build
     fi
   ;;

   4)
     # Redis
     docker-compose -f redis.yml up --build
   ;;

   5)
     # Elasticsearch
     docker-compose -f elasticsearch.yml up --build
   ;;

   6)
     # Adminer
     docker-compose -f adminer.yml up --build
   ;;

   7)
     # Adminer
     docker-compose -f rabbitmq.yml up --build
   ;;

   8)
     # OpenLDAP
     docker-compose -f openldap.yml up --build
   ;;

   *)
     printf "無效的選項\n"
   ;;
esac

exit 0
